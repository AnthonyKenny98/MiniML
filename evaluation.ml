(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
                             Spring 2017
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)
    
open Expr ;;
open Printf;;
  
(* Exception for evaluator runtime, generated by a runtime error *)
exception EvalError of string ;;
(* Exception for evaluator runtime, generated by an explicit "raise" construct *)
exception EvalException of string;;


(* Environments and values *)

module type Env_type = sig
    type env
    type value =
      | Val of expr
      | Closure of (expr * env)
    val create : unit -> env
    val close : expr -> env -> value
    val lookup : env -> varid -> value
    val extend : env -> varid -> value ref -> env
    val env_to_string : env -> string
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : Env_type =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    (* Creates an empty environment *)
    let create () : env = [] ;;

    (* Creates a closure from an expression and the environment it's
       defined in *)
    let rec close (exp : expr) (env : env) : value =
      Closure(exp, env)
   ;;

    (* Looks up the value of a variable in the environment *)
    let rec lookup (env : env) (varname : varid) : value =
      match env with
      | [] -> Val(Var(varname))
      | h :: t -> let var, valref = h in 
        if var = varname then !valref else lookup t varname;;

    (* Returns a new environment just like env except that it maps the
       variable varid to loc *)
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: env ;;

    (* Returns a printable string representation of a value; the flag
       printenvp determines whether to include the environment in the
       string representation when called on a closure *)
    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val exp -> sprintf "Val (%s)" (exp_to_string exp)
      | Closure (exp, env) -> 
          let envp = if printenvp then 
            List.fold_left (fun a (var, varref) -> sprintf "(%s : %s)" var (value_to_string !varref)) "" env
            else "env" in
            sprintf "Closure (%s %s)" (exp_to_string exp) envp;;

   (* Returns a printable string representation of an environment *)
   let env_to_string (env : env) : string =
      List.fold_left (fun a (var, varref) -> sprintf "(%s : %s)" var (value_to_string !varref)) "" env;;

  end
;;
  
(* The evaluation function: Returns the result of type `value` of
   evaluating the expression `exp` in the environment `env`. In this
   initial implementation, we just convert the expression unchanged to
   a value and return it. *)


(** The external evaluator, which can be either the identity function,
    the substitution model version or the dynamic or lexical
    environment model version. *)

let eval_t _env exp = exp ;;


let eval_u (exp : expr) (eval : expr -> expr) = 
  match exp with
  | Num _ | Bool _ | Fun _ | Raise | Unassigned -> exp
  | Unop (unop, e) -> Unop(unop, eval e)
  | Binop (binop, e1, e2) -> 
    (match (eval e1), (eval e2) with
    | Num x, Num y -> 
      (match binop with
      | Plus     -> Num (x + y)
      | Minus    -> Num (x - y)
      | Times    -> Num (x * y)
      | Equals   -> Bool (x = y)
      | LessThan -> Bool (x < y))
    | _,_ -> raise (EvalException ("Invalid Binop Expression: " ^ (exp_to_string (Binop(binop, (eval e1), (eval e2)))))))
  | Conditional (condition, e1, e2) -> 
      (match eval condition with 
      | Bool b -> if b then (eval e1) else (eval e2) 
      | _ -> raise (EvalException ("Invalid Condition: " ^ (exp_to_string condition))))





let rec eval_s env exp : expr = 
  let eval = eval_s env in
  match exp with 
  | Var x -> raise (EvalException ("Unbound Variable: " ^ x))
  | Unop (n, e) -> Unop(n, eval e)
  | Binop _ -> eval_u exp eval
  | Conditional (e1, e2, e3) -> eval_u exp eval
  | Let (v, e1, e2) -> eval (subst v e1 e2)
  | Letrec (x, v, p) -> eval (subst x (subst x (Letrec(x, v, Var(x))) v) p)
  | App (f, e2) -> 
    (match eval f with
    | Fun (x, p) -> eval (subst x e2 p) 
    | _ -> raise (EvalException (sprintf "This cannot be applied: %s is not a function" (exp_to_string f))))
  | x -> x
;;


let rec eval_d env exp =
match exp with 
  | Var x -> (match Env.lookup env x with 
            | Val y | Closure (y, _) -> y)
(*   | Unop (n, e) -> Unop(n, eval_d env e)
  | Binop _ -> eval_u exp (eval_d env)
  | Conditional _ -> eval_u exp (eval_d env) *)
              
  | Let (v, e1, e2) -> eval_d (Env.extend env v (ref (Env.Val(eval_d env e1)))) e2
  | Letrec (v, e1, e2) -> eval_d (Env.extend env v (ref (Env.Val(eval_d (Env.extend env v (ref (Env.Val(Unassigned)))) e1)))) e2
  | App (f, v) -> 
    (match eval_d env f with
    | Fun (x, e) -> eval_d (Env.extend env x (ref (Env.Val(eval_d env v)))) e
    | _ -> raise (EvalException "application of non function")) 
  | _ -> eval_u exp (eval_d env)
;;





let eval_l _ = failwith "eval_l not implemented" ;;

let evaluate = eval_d ;;
